/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Chomp Food & Recipe Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://chompthis.com/api/v2".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
 * @export
 * @interface BrandedFoodObject
 */
export interface BrandedFoodObject {
    /**
     * An array containing an object for each individual item returned by your API call.
     * @type {Array<BrandedFoodObjectItems>}
     * @memberof BrandedFoodObject
     */
    items?: Array<BrandedFoodObjectItems>;
}
/**
 * An object containing additional information on the countries where this item is found
 * @export
 * @interface BrandedFoodObjectCountryDetails
 */
export interface BrandedFoodObjectCountryDetails {
    /**
     * The number of countries where English is the country's primary language
     * @type {number}
     * @memberof BrandedFoodObjectCountryDetails
     */
    englishSpeaking?: number;
    /**
     * The number of countries where English is not the country's primary language
     * @type {number}
     * @memberof BrandedFoodObjectCountryDetails
     */
    nonEnglishSpeaking?: number;
}
/**
 * An object containing information on an individual ingredient that was flagged as potentially not being compatible with a certain diet
 * @export
 * @interface BrandedFoodObjectDietFlags
 */
export interface BrandedFoodObjectDietFlags {
    /**
     * Ingredient name
     * @type {string}
     * @memberof BrandedFoodObjectDietFlags
     */
    ingredient?: string;
    /**
     * Description of the ingredient
     * @type {string}
     * @memberof BrandedFoodObjectDietFlags
     */
    ingredientDescription?: string;
    /**
     * Name of the diet with which this ingredient may not be compatible
     * @type {string}
     * @memberof BrandedFoodObjectDietFlags
     */
    dietLabel?: string;
    /**
     * A description of if we believe this ingredient is compatible with the diet
     * @type {string}
     * @memberof BrandedFoodObjectDietFlags
     */
    isCompatible?: string;
    /**
     * A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility
     * @type {number}
     * @memberof BrandedFoodObjectDietFlags
     */
    compatibilityLevel?: number;
    /**
     * A description of how we graded this ingredient for compatibility with the diet
     * @type {string}
     * @memberof BrandedFoodObjectDietFlags
     */
    compatibilityDescription?: string;
    /**
     * Boolean representing if the ingredient is a known allergen
     * @type {boolean}
     * @memberof BrandedFoodObjectDietFlags
     */
    isAllergen?: boolean;
}
/**
 * An object containing this item's compatibility grades for each supported diet
 * @export
 * @interface BrandedFoodObjectDietLabels
 */
export interface BrandedFoodObjectDietLabels {
    /**
     * 
     * @type {BrandedFoodObjectDietLabelsVegan}
     * @memberof BrandedFoodObjectDietLabels
     */
    vegan?: BrandedFoodObjectDietLabelsVegan;
    /**
     * 
     * @type {BrandedFoodObjectDietLabelsVegetarian}
     * @memberof BrandedFoodObjectDietLabels
     */
    vegetarian?: BrandedFoodObjectDietLabelsVegetarian;
    /**
     * 
     * @type {BrandedFoodObjectDietLabelsGlutenFree}
     * @memberof BrandedFoodObjectDietLabels
     */
    glutenFree?: BrandedFoodObjectDietLabelsGlutenFree;
}
/**
 * An object containing information on this item's compatibility with Gluten Free diets
 * @export
 * @interface BrandedFoodObjectDietLabelsGlutenFree
 */
export interface BrandedFoodObjectDietLabelsGlutenFree {
    /**
     * Diet name
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsGlutenFree
     */
    name?: string;
    /**
     * Boolean describing if this item is compatible with this diet
     * @type {boolean}
     * @memberof BrandedFoodObjectDietLabelsGlutenFree
     */
    isCompatible?: boolean;
    /**
     * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsGlutenFree
     */
    compatibilityLevel?: number;
    /**
     * Boolean that indicates if we are confident in how this item is graded for this diet
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsGlutenFree
     */
    confidence?: number;
    /**
     * Description of our confidence that this item was graded correctly
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsGlutenFree
     */
    confidenceDescription?: string;
}
/**
 * An object containing information on this item's compatibility with the Vegan diets
 * @export
 * @interface BrandedFoodObjectDietLabelsVegan
 */
export interface BrandedFoodObjectDietLabelsVegan {
    /**
     * Diet name
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsVegan
     */
    name?: string;
    /**
     * Boolean describing if this item is compatible with this diet
     * @type {boolean}
     * @memberof BrandedFoodObjectDietLabelsVegan
     */
    isCompatible?: boolean;
    /**
     * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsVegan
     */
    compatibilityLevel?: number;
    /**
     * Boolean that indicates if we are confident in how this item is graded for this diet
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsVegan
     */
    confidence?: number;
    /**
     * Description of our confidence that this item was graded correctly
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsVegan
     */
    confidenceDescription?: string;
}
/**
 * An object containing information on this item's compatibility with Vegetarian diets
 * @export
 * @interface BrandedFoodObjectDietLabelsVegetarian
 */
export interface BrandedFoodObjectDietLabelsVegetarian {
    /**
     * Diet name
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsVegetarian
     */
    name?: string;
    /**
     * Boolean describing if this item is compatible with this diet
     * @type {boolean}
     * @memberof BrandedFoodObjectDietLabelsVegetarian
     */
    isCompatible?: boolean;
    /**
     * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsVegetarian
     */
    compatibilityLevel?: number;
    /**
     * Boolean that indicates if we are confident in how this item is graded for this diet
     * @type {number}
     * @memberof BrandedFoodObjectDietLabelsVegetarian
     */
    confidence?: number;
    /**
     * Description of our confidence that this item was graded correctly
     * @type {string}
     * @memberof BrandedFoodObjectDietLabelsVegetarian
     */
    confidenceDescription?: string;
}
/**
 * An object containing information for this specific item.
 * @export
 * @interface BrandedFoodObjectItems
 */
export interface BrandedFoodObjectItems {
    /**
     * EAN/UPC barcode
     * @type {string}
     * @memberof BrandedFoodObjectItems
     */
    barcode?: string;
    /**
     * Item name as provided by brand owner or as shown on packaging
     * @type {string}
     * @memberof BrandedFoodObjectItems
     */
    name?: string;
    /**
     * The brand name that owns this item
     * @type {string}
     * @memberof BrandedFoodObjectItems
     */
    brand?: string;
    /**
     * This food item's ingredients from greatest quantity to least
     * @type {string}
     * @memberof BrandedFoodObjectItems
     */
    ingredients?: string;
    /**
     * 
     * @type {BrandedFoodObjectPackage}
     * @memberof BrandedFoodObjectItems
     */
    _package?: BrandedFoodObjectPackage;
    /**
     * 
     * @type {BrandedFoodObjectServing}
     * @memberof BrandedFoodObjectItems
     */
    serving?: BrandedFoodObjectServing;
    /**
     * 
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    categories?: Array<string>;
    /**
     * An array containing nutrient informatio objects for this food item
     * @type {Array<BrandedFoodObjectNutrients>}
     * @memberof BrandedFoodObjectItems
     */
    nutrients?: Array<BrandedFoodObjectNutrients>;
    /**
     * 
     * @type {BrandedFoodObjectDietLabels}
     * @memberof BrandedFoodObjectItems
     */
    dietLabels?: BrandedFoodObjectDietLabels;
    /**
     * An array of ingredient objects that were flagged while grading this item for compatibility with each diet
     * @type {Array<BrandedFoodObjectDietFlags>}
     * @memberof BrandedFoodObjectItems
     */
    dietFlags?: Array<BrandedFoodObjectDietFlags>;
    /**
     * 
     * @type {BrandedFoodObjectPackagingPhotos}
     * @memberof BrandedFoodObjectItems
     */
    packagingPhotos?: BrandedFoodObjectPackagingPhotos;
    /**
     * An array of ingredients in this item that may cause allergic reactions in people
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    allergens?: Array<string>;
    /**
     * An array of brands we have associated with this item. Some items are sold by more than 1 brand.
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    brandList?: Array<string>;
    /**
     * An array of countries where this item is sold
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    countries?: Array<string>;
    /**
     * 
     * @type {BrandedFoodObjectCountryDetails}
     * @memberof BrandedFoodObjectItems
     */
    countryDetails?: BrandedFoodObjectCountryDetails;
    /**
     * An array of ingredients made from palm oil
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    palmOilIngredients?: Array<string>;
    /**
     * An array of this item's ingredients
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    ingredientList?: Array<string>;
    /**
     * A boolean indicating if we have English ingredients for this item
     * @type {boolean}
     * @memberof BrandedFoodObjectItems
     */
    hasEnglishIngredients?: boolean;
    /**
     * An array of minerals that this item contains
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    minerals?: Array<string>;
    /**
     * An array of trace ingredients that may be found in this item
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    traces?: Array<string>;
    /**
     * An array of vitamins that are found in this item
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    vitamins?: Array<string>;
    /**
     * A description of this item
     * @type {string}
     * @memberof BrandedFoodObjectItems
     */
    description?: string;
    /**
     * An array of keywords that can be used to describe this item
     * @type {Array<string>}
     * @memberof BrandedFoodObjectItems
     */
    keywords?: Array<string>;
}
/**
 * An object containing information for a specific nutrient found in this food item
 * @export
 * @interface BrandedFoodObjectNutrients
 */
export interface BrandedFoodObjectNutrients {
    /**
     * Nutrient name
     * @type {string}
     * @memberof BrandedFoodObjectNutrients
     */
    name?: string;
    /**
     * Amount of the nutrient per 100g of food
     * @type {number}
     * @memberof BrandedFoodObjectNutrients
     */
    per100g?: number;
    /**
     * The unit used for the measure of this nutrient
     * @type {string}
     * @memberof BrandedFoodObjectNutrients
     */
    measurementUnit?: string;
    /**
     * Nutrient rank
     * @type {number}
     * @memberof BrandedFoodObjectNutrients
     */
    rank?: number;
    /**
     * Number of observations on which the value is based
     * @type {number}
     * @memberof BrandedFoodObjectNutrients
     */
    dataPoints?: number;
    /**
     * Description of the nutrient source
     * @type {string}
     * @memberof BrandedFoodObjectNutrients
     */
    description?: string;
}
/**
 * An object containing basic packaging information about this item
 * @export
 * @interface BrandedFoodObjectPackage
 */
export interface BrandedFoodObjectPackage {
    /**
     * Package quantity
     * @type {number}
     * @memberof BrandedFoodObjectPackage
     */
    quantity?: number;
    /**
     * Package size
     * @type {string}
     * @memberof BrandedFoodObjectPackage
     */
    size?: string;
}
/**
 * A object containing a collection of photos of this item's packaging
 * @export
 * @interface BrandedFoodObjectPackagingPhotos
 */
export interface BrandedFoodObjectPackagingPhotos {
    /**
     * 
     * @type {BrandedFoodObjectPackagingPhotosFront}
     * @memberof BrandedFoodObjectPackagingPhotos
     */
    front?: BrandedFoodObjectPackagingPhotosFront;
    /**
     * 
     * @type {BrandedFoodObjectPackagingPhotosNutrition}
     * @memberof BrandedFoodObjectPackagingPhotos
     */
    nutrition?: BrandedFoodObjectPackagingPhotosNutrition;
    /**
     * 
     * @type {BrandedFoodObjectPackagingPhotosIngredients}
     * @memberof BrandedFoodObjectPackagingPhotos
     */
    ingredients?: BrandedFoodObjectPackagingPhotosIngredients;
}
/**
 * An object containing photos of the front of this item's packaging
 * @export
 * @interface BrandedFoodObjectPackagingPhotosFront
 */
export interface BrandedFoodObjectPackagingPhotosFront {
    /**
     * Small photo of the front of this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosFront
     */
    small?: string;
    /**
     * Thumbnail photo of the front of this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosFront
     */
    thumb?: string;
    /**
     * Full-sized photo of the front of this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosFront
     */
    display?: string;
}
/**
 * An object containing photos of the ingredients on this item's packaging
 * @export
 * @interface BrandedFoodObjectPackagingPhotosIngredients
 */
export interface BrandedFoodObjectPackagingPhotosIngredients {
    /**
     * Small photo of the ingredients on this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosIngredients
     */
    small?: string;
    /**
     * Thumbnail photo of the ingredients on this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosIngredients
     */
    thumb?: string;
    /**
     * Full-sized photo of the ingredients on this item's packaging
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosIngredients
     */
    display?: string;
}
/**
 * An object containing photos of this item's nutrition label
 * @export
 * @interface BrandedFoodObjectPackagingPhotosNutrition
 */
export interface BrandedFoodObjectPackagingPhotosNutrition {
    /**
     * Small photo of this item's nutrition label
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosNutrition
     */
    small?: string;
    /**
     * Thumbnail photo of this item's nutrition label
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosNutrition
     */
    thumb?: string;
    /**
     * Full-sized photo of this item's nutrition label
     * @type {string}
     * @memberof BrandedFoodObjectPackagingPhotosNutrition
     */
    display?: string;
}
/**
 * An object containing serving information for this item
 * @export
 * @interface BrandedFoodObjectServing
 */
export interface BrandedFoodObjectServing {
    /**
     * Serving size
     * @type {string}
     * @memberof BrandedFoodObjectServing
     */
    size?: string;
    /**
     * Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)
     * @type {string}
     * @memberof BrandedFoodObjectServing
     */
    measurementUnit?: string;
    /**
     * Serving size description
     * @type {string}
     * @memberof BrandedFoodObjectServing
     */
    sizeFulltext?: string;
}
/**
 * Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
 * @export
 * @interface IngredientObject
 */
export interface IngredientObject {
    /**
     * An array containing an object for each individual item returned by your API call.
     * @type {Array<IngredientObjectItems>}
     * @memberof IngredientObject
     */
    items?: Array<IngredientObjectItems>;
}
/**
 * An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.
 * @export
 * @interface IngredientObjectCalorieConversionFactor
 */
export interface IngredientObjectCalorieConversionFactor {
    /**
     * The multiplication factor for protein
     * @type {number}
     * @memberof IngredientObjectCalorieConversionFactor
     */
    proteinValue?: number;
    /**
     * The multiplication factor for fat
     * @type {number}
     * @memberof IngredientObjectCalorieConversionFactor
     */
    fatValue?: number;
    /**
     * The multiplication factor for carbohydrates
     * @type {number}
     * @memberof IngredientObjectCalorieConversionFactor
     */
    carbohydrateValue?: number;
}
/**
 * An object containing information on a specific component of this food item
 * @export
 * @interface IngredientObjectComponents
 */
export interface IngredientObjectComponents {
    /**
     * The kind of component, e.g. bone
     * @type {string}
     * @memberof IngredientObjectComponents
     */
    name?: string;
    /**
     * The weight of the component as a percentage of the total weight of the food
     * @type {number}
     * @memberof IngredientObjectComponents
     */
    pctWeight?: number;
    /**
     * The weight of the component in grams
     * @type {number}
     * @memberof IngredientObjectComponents
     */
    gramWeight?: number;
    /**
     * Whether the component is refuse, i.e. not edible
     * @type {boolean}
     * @memberof IngredientObjectComponents
     */
    isRefuse?: boolean;
    /**
     * The number of obersvations on which the measure is based
     * @type {number}
     * @memberof IngredientObjectComponents
     */
    dataPoints?: number;
}
/**
 * An object containing information for this specific item.
 * @export
 * @interface IngredientObjectItems
 */
export interface IngredientObjectItems {
    /**
     * Item name as provided by brand owner or as shown on packaging
     * @type {string}
     * @memberof IngredientObjectItems
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IngredientObjectItems
     */
    categories?: Array<string>;
    /**
     * An array containing nutrient informatio objects for this food item
     * @type {Array<IngredientObjectNutrients>}
     * @memberof IngredientObjectItems
     */
    nutrients?: Array<IngredientObjectNutrients>;
    /**
     * 
     * @type {IngredientObjectCalorieConversionFactor}
     * @memberof IngredientObjectItems
     */
    calorieConversionFactor?: IngredientObjectCalorieConversionFactor;
    /**
     * The multiplication factor used to calculate protein from nitrogen
     * @type {number}
     * @memberof IngredientObjectItems
     */
    proteinConversionFactor?: number;
    /**
     * An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
     * @type {Array<IngredientObjectComponents>}
     * @memberof IngredientObjectItems
     */
    components?: Array<IngredientObjectComponents>;
    /**
     * An array of objects containing information on discrete amounts of a food found in this item
     * @type {Array<IngredientObjectPortions>}
     * @memberof IngredientObjectItems
     */
    portions?: Array<IngredientObjectPortions>;
    /**
     * Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \"BRAND's Spicy Enchilada\" the common name may be \"Chicken enchilada\")
     * @type {string}
     * @memberof IngredientObjectItems
     */
    commonName?: string;
    /**
     * Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
     * @type {string}
     * @memberof IngredientObjectItems
     */
    footnote?: string;
    /**
     * The original search term that found this food item
     * @type {string}
     * @memberof IngredientObjectItems
     */
    searchTerm?: string;
    /**
     * A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.
     * @type {string}
     * @memberof IngredientObjectItems
     */
    score?: string;
}
/**
 * An object containing information for a specific nutrient found in this food item
 * @export
 * @interface IngredientObjectNutrients
 */
export interface IngredientObjectNutrients {
    /**
     * Nutrient name
     * @type {string}
     * @memberof IngredientObjectNutrients
     */
    name?: string;
    /**
     * Amount of the nutrient per 100g of food
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    per100g?: number;
    /**
     * The unit used for the measure of this nutrient
     * @type {string}
     * @memberof IngredientObjectNutrients
     */
    measurementUnit?: string;
    /**
     * Minimum nutrient value
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    min?: number;
    /**
     * Maximum nutrient value
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    max?: number;
    /**
     * Median nutrient value
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    median?: number;
    /**
     * Nutrient rank
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    rank?: number;
    /**
     * Number of observations on which the value is based
     * @type {number}
     * @memberof IngredientObjectNutrients
     */
    dataPoints?: number;
    /**
     * Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.
     * @type {string}
     * @memberof IngredientObjectNutrients
     */
    footnote?: string;
    /**
     * Description of the nutrient source
     * @type {string}
     * @memberof IngredientObjectNutrients
     */
    description?: string;
}
/**
 * An object containing information on a specific food portion found in this item
 * @export
 * @interface IngredientObjectPortions
 */
export interface IngredientObjectPortions {
    /**
     * The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)
     * @type {string}
     * @memberof IngredientObjectPortions
     */
    measurementUnit?: string;
    /**
     * Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.
     * @type {string}
     * @memberof IngredientObjectPortions
     */
    description?: string;
    /**
     * Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)
     * @type {string}
     * @memberof IngredientObjectPortions
     */
    modifier?: string;
    /**
     * The weight of the measure in grams
     * @type {number}
     * @memberof IngredientObjectPortions
     */
    gramWeight?: number;
    /**
     * The number of observations on which the measure is based
     * @type {number}
     * @memberof IngredientObjectPortions
     */
    dataPoints?: number;
    /**
     * Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.
     * @type {string}
     * @memberof IngredientObjectPortions
     */
    footnote?: string;
}
/**
 * Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
 * @export
 * @interface RecipeObject
 */
export interface RecipeObject {
    /**
     * An array containing an object for each individual item returned by your API call.
     * @type {Array<RecipeObjectItems>}
     * @memberof RecipeObject
     */
    items?: Array<RecipeObjectItems>;
}
/**
 * An object containing recipe attributes
 * @export
 * @interface RecipeObjectAttributes
 */
export interface RecipeObjectAttributes {
    /**
     * The time it takes to prep this recipe
     * @type {string}
     * @memberof RecipeObjectAttributes
     */
    prepTime?: string;
    /**
     * The total time it takes to make this recipe
     * @type {string}
     * @memberof RecipeObjectAttributes
     */
    totalTime?: string;
    /**
     * The number of servings this recipe makes
     * @type {string}
     * @memberof RecipeObjectAttributes
     */
    servings?: string;
    /**
     * The size of each serving
     * @type {string}
     * @memberof RecipeObjectAttributes
     */
    servingSize?: string;
}
/**
 * An object containing information about a specific recipe ingredient
 * @export
 * @interface RecipeObjectIngredients
 */
export interface RecipeObjectIngredients {
    /**
     * The quantity of this ingredient
     * @type {string}
     * @memberof RecipeObjectIngredients
     */
    quantity?: string;
    /**
     * A description of this ingredient
     * @type {string}
     * @memberof RecipeObjectIngredients
     */
    description?: string;
}
/**
 * An object containing information for this specific item.
 * @export
 * @interface RecipeObjectItems
 */
export interface RecipeObjectItems {
    /**
     * Unique recipe ID
     * @type {string}
     * @memberof RecipeObjectItems
     */
    id?: string;
    /**
     * Recipe title
     * @type {string}
     * @memberof RecipeObjectItems
     */
    title?: string;
    /**
     * 
     * @type {RecipeObjectMeta}
     * @memberof RecipeObjectItems
     */
    meta?: RecipeObjectMeta;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeObjectItems
     */
    categories?: Array<string>;
    /**
     * The author of this recipe. You must attribute this author when displaying this recipe.
     * @type {string}
     * @memberof RecipeObjectItems
     */
    author?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeObjectItems
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeObjectItems
     */
    topics?: Array<string>;
    /**
     * 
     * @type {RecipeObjectAttributes}
     * @memberof RecipeObjectItems
     */
    attributes?: RecipeObjectAttributes;
    /**
     * An array containing this recipe's ingredients
     * @type {Array<RecipeObjectIngredients>}
     * @memberof RecipeObjectItems
     */
    ingredients?: Array<RecipeObjectIngredients>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeObjectItems
     */
    baseIngredients?: Array<string>;
    /**
     * 
     * @type {RecipeObjectNutrients}
     * @memberof RecipeObjectItems
     */
    nutrients?: RecipeObjectNutrients;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeObjectItems
     */
    diabeticExchanges?: Array<string>;
}
/**
 * An object containing this item's compatibility grades for each supported diet
 * @export
 * @interface RecipeObjectMeta
 */
export interface RecipeObjectMeta {
    /**
     * URL to the recipe. You must link back to the recipe when displaying it.
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    url?: string;
    /**
     * 
     * @type {RecipeObjectMetaImages}
     * @memberof RecipeObjectMeta
     */
    images?: RecipeObjectMetaImages;
    /**
     * The source of the recipe. You must attribute this source when displaying this recipe.
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    source?: string;
    /**
     * This recipe's cuisine
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    cuisine?: string;
    /**
     * The date when this recipe was created
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    created?: string;
    /**
     * The date when this recipe was most recently modified
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    modified?: string;
    /**
     * Additional information about this recipe's nutrients
     * @type {string}
     * @memberof RecipeObjectMeta
     */
    nutrientsNotice?: string;
}
/**
 * An object containing this recipe's image URLs
 * @export
 * @interface RecipeObjectMetaImages
 */
export interface RecipeObjectMetaImages {
    /**
     * Extra large recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    extraLarge?: string;
    /**
     * Large recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    large?: string;
    /**
     * Standard recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    standard?: string;
    /**
     * Grid view recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    gridView?: string;
    /**
     * Small recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    small?: string;
    /**
     * Thumbnail recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    thumbnail?: string;
    /**
     * Extra small recipe image
     * @type {string}
     * @memberof RecipeObjectMetaImages
     */
    extraSmall?: string;
}
/**
 * An object containing nutrient information for this recipe
 * @export
 * @interface RecipeObjectNutrients
 */
export interface RecipeObjectNutrients {
    /**
     * An array containing information for calories found in this recipe
     * @type {Array<RecipeObjectNutrientsCalories>}
     * @memberof RecipeObjectNutrients
     */
    calories?: Array<RecipeObjectNutrientsCalories>;
    /**
     * An array containing information for this recipe's daily recommended value of certain nutrients
     * @type {Array<RecipeObjectNutrientsCalories>}
     * @memberof RecipeObjectNutrients
     */
    dailyValues?: Array<RecipeObjectNutrientsCalories>;
    /**
     * An array containing information for fat found in this recipe
     * @type {Array<RecipeObjectNutrientsCalories>}
     * @memberof RecipeObjectNutrients
     */
    fat?: Array<RecipeObjectNutrientsCalories>;
    /**
     * An array containing information for carbs found in this recipe
     * @type {Array<RecipeObjectNutrientsCalories>}
     * @memberof RecipeObjectNutrients
     */
    carbs?: Array<RecipeObjectNutrientsCalories>;
    /**
     * An array containing information for vitamins found in this recipe
     * @type {Array<RecipeObjectNutrientsCalories>}
     * @memberof RecipeObjectNutrients
     */
    vitamins?: Array<RecipeObjectNutrientsCalories>;
}
/**
 * 
 * @export
 * @interface RecipeObjectNutrientsCalories
 */
export interface RecipeObjectNutrientsCalories {
    /**
     * Nutrient name
     * @type {string}
     * @memberof RecipeObjectNutrientsCalories
     */
    title?: string;
    /**
     * The amount of this nutrient in this recipe
     * @type {string}
     * @memberof RecipeObjectNutrientsCalories
     */
    value?: string;
    /**
     * The daily recommended percent total for this nutrient
     * @type {string}
     * @memberof RecipeObjectNutrientsCalories
     */
    percent?: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Get data for a branded food using the food's UPC/EAN barcode.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.   * Perform a [check-digit](https://en.wikipedia.org/wiki/Check_digit#UPC) on the barcode you are using.   * Use a barcode from our website [ChompThis.com](https://chompthis.com/?r=api). Search for a food and use the barcode shown in the search results.   * It is possible that our database contains the food you're looking for, but does not have the same barcode you are using. This can happen if a manufacturer introduces a variation of the same food, or the barcode you got was from a 2 oz bag of chips when our database has the food packaged in a 4 oz bag.   * [Contact us](https://chompthis.com/contact.php?api=y) if you are having trouble. 
         * @summary Get a branded food item using a barcode
         * @param {string} code #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedBarcodePhpGet(code: string, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling foodBrandedBarcodePhpGet.');
            }
            const localVarPath = `/food/branded/barcode.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Search for branded food items by name.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get a branded food item by name
         * @param {string} name #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedNamePhpGet(name: string, limit?: number, page?: number, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling foodBrandedNamePhpGet.');
            }
            const localVarPath = `/food/branded/name.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Search for branded food items using various parameters.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get data for branded food items using various search parameters
         * @param {string} [allergen] #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [brand] #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60; 
         * @param {string} [category] #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60; 
         * @param {string} [country] #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [diet] #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [ingredient] #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60; 
         * @param {string} [keyword] #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [mineral] #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60; 
         * @param {string} [nutrient] #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [palmOil] #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60; 
         * @param {string} [trace] ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [vitamin] #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedSearchPhpGet(allergen?: string, brand?: string, category?: string, country?: string, diet?: string, ingredient?: string, keyword?: string, mineral?: string, nutrient?: string, palmOil?: string, trace?: string, vitamin?: string, limit?: number, page?: number, userId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/food/branded/search.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (allergen !== undefined) {
                localVarQueryParameter['allergen'] = allergen;
            }

            if (brand !== undefined) {
                localVarQueryParameter['brand'] = brand;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (diet !== undefined) {
                localVarQueryParameter['diet'] = diet;
            }

            if (ingredient !== undefined) {
                localVarQueryParameter['ingredient'] = ingredient;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (mineral !== undefined) {
                localVarQueryParameter['mineral'] = mineral;
            }

            if (nutrient !== undefined) {
                localVarQueryParameter['nutrient'] = nutrient;
            }

            if (palmOil !== undefined) {
                localVarQueryParameter['palm_oil'] = palmOil;
            }

            if (trace !== undefined) {
                localVarQueryParameter['trace'] = trace;
            }

            if (vitamin !== undefined) {
                localVarQueryParameter['vitamin'] = vitamin;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Get data for a specific ingredient or a specific set of ingredients.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get raw/generic food ingredient item(s)
         * @param {string} find Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients. 
         * @param {number} [limit] #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodIngredientSearchPhpGet(find: string, limit?: number, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'find' is not null or undefined
            if (find === null || find === undefined) {
                throw new RequiredError('find','Required parameter find was null or undefined when calling foodIngredientSearchPhpGet.');
            }
            const localVarPath = `/food/ingredient/search.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (find !== undefined) {
                localVarQueryParameter['find'] = find;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` 
         * @summary Get a recipe by ID
         * @param {string} id #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIdPhpGet(id: string, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recipeIdPhpGet.');
            }
            const localVarPath = `/recipe/id.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` 
         * @summary Get recipes using a list of ingredients
         * @param {string} list #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIngredientPhpGet(list: string, limit?: number, page?: number, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'list' is not null or undefined
            if (list === null || list === undefined) {
                throw new RequiredError('list','Required parameter list was null or undefined when calling recipeIngredientPhpGet.');
            }
            const localVarPath = `/recipe/ingredient.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` 
         * @summary Get random popular recipes
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeRandomPhpGet(limit?: number, userId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/recipe/random.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` 
         * @summary Get recipes using a title and optional filters
         * @param {string} title #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60; 
         * @param {string} [excludedCuisine] #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60; 
         * @param {string} [includedCuisine] #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60; 
         * @param {string} [excludedIngredient] #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60; 
         * @param {string} [includedIngredient] #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60; 
         * @param {number} [nutrientsRequired] #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeSearchPhpGet(title: string, excludedCuisine?: string, includedCuisine?: string, excludedIngredient?: string, includedIngredient?: string, nutrientsRequired?: number, limit?: number, page?: number, userId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling recipeSearchPhpGet.');
            }
            const localVarPath = `/recipe/search.php`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (excludedCuisine !== undefined) {
                localVarQueryParameter['excluded_cuisine'] = excludedCuisine;
            }

            if (includedCuisine !== undefined) {
                localVarQueryParameter['included_cuisine'] = includedCuisine;
            }

            if (excludedIngredient !== undefined) {
                localVarQueryParameter['excluded_ingredient'] = excludedIngredient;
            }

            if (includedIngredient !== undefined) {
                localVarQueryParameter['included_ingredient'] = includedIngredient;
            }

            if (nutrientsRequired !== undefined) {
                localVarQueryParameter['nutrients_required'] = nutrientsRequired;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ## Get data for a branded food using the food's UPC/EAN barcode.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.   * Perform a [check-digit](https://en.wikipedia.org/wiki/Check_digit#UPC) on the barcode you are using.   * Use a barcode from our website [ChompThis.com](https://chompthis.com/?r=api). Search for a food and use the barcode shown in the search results.   * It is possible that our database contains the food you're looking for, but does not have the same barcode you are using. This can happen if a manufacturer introduces a variation of the same food, or the barcode you got was from a 2 oz bag of chips when our database has the food packaged in a 4 oz bag.   * [Contact us](https://chompthis.com/contact.php?api=y) if you are having trouble. 
         * @summary Get a branded food item using a barcode
         * @param {string} code #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedBarcodePhpGet(code: string, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrandedFoodObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).foodBrandedBarcodePhpGet(code, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Search for branded food items by name.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get a branded food item by name
         * @param {string} name #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedNamePhpGet(name: string, limit?: number, page?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrandedFoodObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).foodBrandedNamePhpGet(name, limit, page, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Search for branded food items using various parameters.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get data for branded food items using various search parameters
         * @param {string} [allergen] #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [brand] #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60; 
         * @param {string} [category] #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60; 
         * @param {string} [country] #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [diet] #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [ingredient] #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60; 
         * @param {string} [keyword] #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [mineral] #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60; 
         * @param {string} [nutrient] #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [palmOil] #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60; 
         * @param {string} [trace] ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [vitamin] #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedSearchPhpGet(allergen?: string, brand?: string, category?: string, country?: string, diet?: string, ingredient?: string, keyword?: string, mineral?: string, nutrient?: string, palmOil?: string, trace?: string, vitamin?: string, limit?: number, page?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrandedFoodObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).foodBrandedSearchPhpGet(allergen, brand, category, country, diet, ingredient, keyword, mineral, nutrient, palmOil, trace, vitamin, limit, page, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Get data for a specific ingredient or a specific set of ingredients.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get raw/generic food ingredient item(s)
         * @param {string} find Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients. 
         * @param {number} [limit] #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodIngredientSearchPhpGet(find: string, limit?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IngredientObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).foodIngredientSearchPhpGet(find, limit, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` 
         * @summary Get a recipe by ID
         * @param {string} id #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIdPhpGet(id: string, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecipeObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).recipeIdPhpGet(id, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` 
         * @summary Get recipes using a list of ingredients
         * @param {string} list #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIngredientPhpGet(list: string, limit?: number, page?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecipeObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).recipeIngredientPhpGet(list, limit, page, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` 
         * @summary Get random popular recipes
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeRandomPhpGet(limit?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecipeObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).recipeRandomPhpGet(limit, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` 
         * @summary Get recipes using a title and optional filters
         * @param {string} title #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60; 
         * @param {string} [excludedCuisine] #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60; 
         * @param {string} [includedCuisine] #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60; 
         * @param {string} [excludedIngredient] #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60; 
         * @param {string} [includedIngredient] #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60; 
         * @param {number} [nutrientsRequired] #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeSearchPhpGet(title: string, excludedCuisine?: string, includedCuisine?: string, excludedIngredient?: string, includedIngredient?: string, nutrientsRequired?: number, limit?: number, page?: number, userId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecipeObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).recipeSearchPhpGet(title, excludedCuisine, includedCuisine, excludedIngredient, includedIngredient, nutrientsRequired, limit, page, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * ## Get data for a branded food using the food's UPC/EAN barcode.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.   * Perform a [check-digit](https://en.wikipedia.org/wiki/Check_digit#UPC) on the barcode you are using.   * Use a barcode from our website [ChompThis.com](https://chompthis.com/?r=api). Search for a food and use the barcode shown in the search results.   * It is possible that our database contains the food you're looking for, but does not have the same barcode you are using. This can happen if a manufacturer introduces a variation of the same food, or the barcode you got was from a 2 oz bag of chips when our database has the food packaged in a 4 oz bag.   * [Contact us](https://chompthis.com/contact.php?api=y) if you are having trouble. 
         * @summary Get a branded food item using a barcode
         * @param {string} code #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedBarcodePhpGet(code: string, userId?: string, options?: any) {
            return DefaultApiFp(configuration).foodBrandedBarcodePhpGet(code, userId, options)(fetch, basePath);
        },
        /**
         * ## Search for branded food items by name.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get a branded food item by name
         * @param {string} name #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedNamePhpGet(name: string, limit?: number, page?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).foodBrandedNamePhpGet(name, limit, page, userId, options)(fetch, basePath);
        },
        /**
         * ## Search for branded food items using various parameters.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get data for branded food items using various search parameters
         * @param {string} [allergen] #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [brand] #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60; 
         * @param {string} [category] #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60; 
         * @param {string} [country] #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [diet] #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [ingredient] #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60; 
         * @param {string} [keyword] #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [mineral] #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60; 
         * @param {string} [nutrient] #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [palmOil] #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60; 
         * @param {string} [trace] ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
         * @param {string} [vitamin] #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodBrandedSearchPhpGet(allergen?: string, brand?: string, category?: string, country?: string, diet?: string, ingredient?: string, keyword?: string, mineral?: string, nutrient?: string, palmOil?: string, trace?: string, vitamin?: string, limit?: number, page?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).foodBrandedSearchPhpGet(allergen, brand, category, country, diet, ingredient, keyword, mineral, nutrient, palmOil, trace, vitamin, limit, page, userId, options)(fetch, basePath);
        },
        /**
         * ## Get data for a specific ingredient or a specific set of ingredients.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
         * @summary Get raw/generic food ingredient item(s)
         * @param {string} find Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients. 
         * @param {number} [limit] #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodIngredientSearchPhpGet(find: string, limit?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).foodIngredientSearchPhpGet(find, limit, userId, options)(fetch, basePath);
        },
        /**
         * ## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` 
         * @summary Get a recipe by ID
         * @param {string} id #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIdPhpGet(id: string, userId?: string, options?: any) {
            return DefaultApiFp(configuration).recipeIdPhpGet(id, userId, options)(fetch, basePath);
        },
        /**
         * ## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` 
         * @summary Get recipes using a list of ingredients
         * @param {string} list #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeIngredientPhpGet(list: string, limit?: number, page?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).recipeIngredientPhpGet(list, limit, page, userId, options)(fetch, basePath);
        },
        /**
         * ## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` 
         * @summary Get random popular recipes
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeRandomPhpGet(limit?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).recipeRandomPhpGet(limit, userId, options)(fetch, basePath);
        },
        /**
         * ## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` 
         * @summary Get recipes using a title and optional filters
         * @param {string} title #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60; 
         * @param {string} [excludedCuisine] #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60; 
         * @param {string} [includedCuisine] #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60; 
         * @param {string} [excludedIngredient] #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60; 
         * @param {string} [includedIngredient] #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60; 
         * @param {number} [nutrientsRequired] #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60; 
         * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
         * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
         * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipeSearchPhpGet(title: string, excludedCuisine?: string, includedCuisine?: string, excludedIngredient?: string, includedIngredient?: string, nutrientsRequired?: number, limit?: number, page?: number, userId?: string, options?: any) {
            return DefaultApiFp(configuration).recipeSearchPhpGet(title, excludedCuisine, includedCuisine, excludedIngredient, includedIngredient, nutrientsRequired, limit, page, userId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * ## Get data for a branded food using the food's UPC/EAN barcode.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.   * Perform a [check-digit](https://en.wikipedia.org/wiki/Check_digit#UPC) on the barcode you are using.   * Use a barcode from our website [ChompThis.com](https://chompthis.com/?r=api). Search for a food and use the barcode shown in the search results.   * It is possible that our database contains the food you're looking for, but does not have the same barcode you are using. This can happen if a manufacturer introduces a variation of the same food, or the barcode you got was from a 2 oz bag of chips when our database has the food packaged in a 4 oz bag.   * [Contact us](https://chompthis.com/contact.php?api=y) if you are having trouble. 
     * @summary Get a branded food item using a barcode
     * @param {string} code #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public foodBrandedBarcodePhpGet(code: string, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).foodBrandedBarcodePhpGet(code, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Search for branded food items by name.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     * @summary Get a branded food item by name
     * @param {string} name #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60; 
     * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
     * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public foodBrandedNamePhpGet(name: string, limit?: number, page?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).foodBrandedNamePhpGet(name, limit, page, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Search for branded food items using various parameters.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     * @summary Get data for branded food items using various search parameters
     * @param {string} [allergen] #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [brand] #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60; 
     * @param {string} [category] #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60; 
     * @param {string} [country] #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [diet] #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [ingredient] #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60; 
     * @param {string} [keyword] #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [mineral] #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60; 
     * @param {string} [nutrient] #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [palmOil] #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60; 
     * @param {string} [trace] ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter. 
     * @param {string} [vitamin] #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60; 
     * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60; 
     * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public foodBrandedSearchPhpGet(allergen?: string, brand?: string, category?: string, country?: string, diet?: string, ingredient?: string, keyword?: string, mineral?: string, nutrient?: string, palmOil?: string, trace?: string, vitamin?: string, limit?: number, page?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).foodBrandedSearchPhpGet(allergen, brand, category, country, diet, ingredient, keyword, mineral, nutrient, palmOil, trace, vitamin, limit, page, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Get data for a specific ingredient or a specific set of ingredients.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     * @summary Get raw/generic food ingredient item(s)
     * @param {string} find Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients. 
     * @param {number} [limit] #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public foodIngredientSearchPhpGet(find: string, limit?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).foodIngredientSearchPhpGet(find, limit, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` 
     * @summary Get a recipe by ID
     * @param {string} id #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recipeIdPhpGet(id: string, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).recipeIdPhpGet(id, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` 
     * @summary Get recipes using a list of ingredients
     * @param {string} list #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60; 
     * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
     * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recipeIngredientPhpGet(list: string, limit?: number, page?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).recipeIngredientPhpGet(list, limit, page, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` 
     * @summary Get random popular recipes
     * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recipeRandomPhpGet(limit?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).recipeRandomPhpGet(limit, userId, options)(this.fetch, this.basePath);
    }

    /**
     * ## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` 
     * @summary Get recipes using a title and optional filters
     * @param {string} title #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60; 
     * @param {string} [excludedCuisine] #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60; 
     * @param {string} [includedCuisine] #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60; 
     * @param {string} [excludedIngredient] #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60; 
     * @param {string} [includedIngredient] #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60; 
     * @param {number} [nutrientsRequired] #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60; 
     * @param {number} [limit] #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60; 
     * @param {number} [page] #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60; 
     * @param {string} [userId] #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recipeSearchPhpGet(title: string, excludedCuisine?: string, includedCuisine?: string, excludedIngredient?: string, includedIngredient?: string, nutrientsRequired?: number, limit?: number, page?: number, userId?: string, options?: any) {
        return DefaultApiFp(this.configuration).recipeSearchPhpGet(title, excludedCuisine, includedCuisine, excludedIngredient, includedIngredient, nutrientsRequired, limit, page, userId, options)(this.fetch, this.basePath);
    }

}
